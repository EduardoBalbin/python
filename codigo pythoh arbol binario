class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, value):
        if not self.root:
            self.root = Node(value)
        else:
            self._insert(self.root, value)

    def _insert(self, node, value):
        if value < node.value:
            if node.left is None:
                node.left = Node(value)
            else:
                self._insert(node.left, value)
        else:
            if node.right is None:
                node.right = Node(value)
            else:
                self._insert(node.right, value)

    def search(self, value):
        return self._search(self.root, value)

    def _search(self, node, value):
        if node is None:
            return None
        if value == node.value:
            return node
        elif value < node.value:
            return self._search(node.left, value)
        else:
            return self._search(node.right, value)

    def delete(self, value):
        self.root = self._delete(self.root, value)

    def _delete(self, node, value):
        if node is None:
            return node
        if value < node.value:
            node.left = self._delete(node.left, value)
        elif value > node.value:
            node.right = self._delete(node.right, value)
        else:
            if node.left is None:
                return node.right
            elif node.right is None:
                return node.left
            min_val = self._find_min(node.right)
            node.value = min_val
            node.right = self._delete(node.right, min_val)
        return node

    def _find_min(self, node):
        while node.left is not None:
            node = node.left
        return node.value

# Ejemplo de uso
tree = BinaryTree()
tree.insert(5)
tree.insert(2)
tree.insert(8)
tree.insert(3)
tree.insert(9)

print(tree.search(2))  # Devuelve el nodo con valor 2
print(tree.search(6))  # Devuelve None

tree.delete(2)
print(tree.search(2))  # Devuelve None
